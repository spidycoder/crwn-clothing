import React from "react";
import { auth, app } from "../../firebase/firebase-initialise";
import { createStructuredSelector } from "reselect";
import { selectCartHidden } from "../../redux/cart/cart.selector";
import { selectCurrentUser } from "../../redux/user/user.selector";
import { ReactComponent as Logo } from "../../assets/crown.svg";
import { useAuth0 } from "@auth0/auth0-react";
import { getAuth } from "firebase/auth";
import { connect } from "react-redux";
import {
  OptionDiv,
  OptionLink,
  OptionsContainer,
  NavLinkContainer,
  HeaderContainer,
} from "./header.styles";
import CartIcon from "../cart-icon/cart-icon";
import CartDropdown from "../cart-dropdown/cart-dropdown";
import ShareButton from "../share-button/share-button.component";

const Header = ({ currentUser, hidden }) => {
  const Url = "http//localhost:3000";
  const shareTitle = "Share";
  const { loginWithRedirect, isAuthenticated, logout, user } = useAuth0();
  return (
    <HeaderContainer>
      <NavLinkContainer to="/">
        <Logo className="logo" />
      </NavLinkContainer>
      <OptionsContainer>
        <OptionLink to="/shop">SHOP</OptionLink>
        <OptionLink to="/contact">CONTACT</OptionLink>
        {/* this login and logout button is generated by Firebase */}

        {currentUser ? (
          <OptionDiv onClick={() => auth.signOut()}>SIGN OUT</OptionDiv>
        ) : (
          <OptionLink to="/signin">SIGN IN</OptionLink>
        )}
        <ShareButton url={Url}  shareTitle={shareTitle}/>

        {/* this login and logout button is generated by auth0 */}

        {/* {isAuthenticated && <p>{user.nickname}</p>}
        {isAuthenticated ? (
          <OptionLink
            onClick={() =>
              logout({ logoutParams: { returnTo: window.location.origin } })
            }
          >
            LOG OUT
          </OptionLink>
        ) : (
          <OptionLink onClick={() => loginWithRedirect()}>LOG IN</OptionLink>
        )} */}

        <CartIcon />
      </OptionsContainer>
      {hidden ? false : <CartDropdown />}
      {/* <ShareButton url={Url} title={Title} /> */}
    </HeaderContainer>
  );
};

const mapStateToProps = createStructuredSelector({
  currentUser: selectCurrentUser,
  hidden: selectCartHidden,
});
export default connect(mapStateToProps)(Header);
